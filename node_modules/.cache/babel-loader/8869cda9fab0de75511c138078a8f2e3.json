{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Me\\\\Desktop\\\\git\\\\Sprint-Challenge-React-Wars\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Me\\\\desktop\\\\git\\\\Sprint-Challenge-React-Wars\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimp;\nimport StarWarsPeeps from \"./components/StarWarsPeeps\";\nimport './App.css';\n\nconst App = () => {\n  // Try to think through what state you'll need for this app before starting. Then build out\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1]; // Fetch characters from the star wars api in an effect hook. Remember, anytime you have a \n  // side effect in a component, you want to think about which state and/or props it should\n  // sync up with, if any.\n\n\n  useEffect(() => {\n    axios.get(\"https://swapi.co/api/people\").then(response => {\n      console.log(response.data);\n      const Peeps = response.data.results;\n      setData(Peeps);\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"Header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"React Wars\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, data.map(props => {\n    return React.createElement(StarWarsPeeps, {\n      limit: 10,\n      name: props.name,\n      haircolor: props.hair_color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Me\\desktop\\git\\Sprint-Challenge-React-Wars\\src\\App.js"],"names":["React","useState","useEffect","ReactDOM","axios","imp","StarWarsPeeps","App","data","setData","get","then","response","console","log","Peeps","results","map","props","name","hair_color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACAC,GAAG;AACH,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AADgB,oBAGQN,QAAQ,CAAC,EAAD,CAHhB;AAAA;AAAA,QAGTO,IAHS;AAAA,QAGHC,OAHG,kBAKhB;AACA;AACA;;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,KAAK,CAACM,GAAN,gCAAyCC,IAAzC,CAA8CC,QAAQ,IAAI;AACxDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACJ,IAArB;AACA,YAAMO,KAAK,GAAGH,QAAQ,CAACJ,IAAT,CAAcQ,OAA5B;AACAP,MAAAA,OAAO,CAACM,KAAD,CAAP;AACD,KAJD;AAKD,GANQ,EAMN,EANM,CAAT;AAQA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,IAAI,CAACS,GAAL,CAASC,KAAK,IAAI;AACjB,WAAO,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAE,EAAtB;AACL,MAAA,IAAI,EAAEA,KAAK,CAACC,IADP;AAEL,MAAA,SAAS,EAAED,KAAK,CAACE,UAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAID,GALA,CADH,CAFF,CADF;AAaD,CA7BD;;AA+BA,eAAeb,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\nimp\r\nimport StarWarsPeeps from \"./components/StarWarsPeeps\";\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  // Try to think through what state you'll need for this app before starting. Then build out\r\n  // the state properties here.\r\n  const [data, setData] = useState([]);\r\n\r\n  // Fetch characters from the star wars api in an effect hook. Remember, anytime you have a \r\n  // side effect in a component, you want to think about which state and/or props it should\r\n  // sync up with, if any.\r\n  useEffect(() => {\r\n    axios.get(`https://swapi.co/api/people`).then(response => {\r\n      console.log(response.data);\r\n      const Peeps = response.data.results;\r\n      setData(Peeps);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"Header\">React Wars</h1>\r\n      <div>\r\n        {data.map(props => {\r\n          return <StarWarsPeeps limit={10}\r\n            name={props.name}\r\n            haircolor={props.hair_color}\r\n          />\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}